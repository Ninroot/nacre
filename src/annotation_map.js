'use strict';

/* eslint-disable */

// Generated by generate_annotations.js
// This file maps native methods to their signatures for completion
// in the repl. if a method isn't listed here, it is either unknown
// to the generator script, or it doesn't take any arguments.

const assert = require('assert');
const async_hooks = require('async_hooks');
const buffer = require('buffer');
const child_process = require('child_process');
const cluster = require('cluster');
const crypto = require('crypto');
const dgram = require('dgram');
const dns = require('dns');
const fs = require('fs');
const http = require('http');
const http2 = require('http2');
const https = require('https');
const inspector = require('inspector');
const net = require('net');
const os = require('os');
const path = require('path');
const punycode = require('punycode');
const querystring = require('querystring');
const readline = require('readline');
const timers = require('timers');
const tls = require('tls');
const trace_events = require('trace_events');
const tty = require('tty');
const url = require('url');
const util = require('util');
const v8 = require('v8');
const vm = require('vm');
const zlib = require('zlib');

module.exports = new WeakMap([
  [global.eval, [["x"]]],
  [global.parseInt, [["s","?radix"]]],
  [global.parseFloat, [["string"]]],
  [global.isNaN, [["number"]]],
  [global.isFinite, [["number"]]],
  [global.decodeURI, [["encodedURI"]]],
  [global.decodeURIComponent, [["encodedURIComponent"]]],
  [global.encodeURI, [["uri"]]],
  [global.encodeURIComponent, [["uriComponent"]]],
  [global.escape, [["string"]]],
  [global.unescape, [["string"]]],
  [Object.prototype.hasOwnProperty, [["v"]]],
  [Object.prototype.isPrototypeOf, [["v"]]],
  [Object.prototype.propertyIsEnumerable, [["v"]]],
  [global.Object, [["?value"]]],
  [Object.getPrototypeOf, [["o"]]],
  [Object.getOwnPropertyDescriptor, [["o","p"]]],
  [Object.getOwnPropertyNames, [["o"]]],
  [Object.create, [["o"],["o","properties"]]],
  [Object.defineProperty, [["o","p","attributes"]]],
  [Object.defineProperties, [["o","properties"]]],
  [Object.seal, [["o"]]],
  [Object.freeze, [["a"],["f"],["o"]]],
  [Object.preventExtensions, [["o"]]],
  [Object.isSealed, [["o"]]],
  [Object.isFrozen, [["o"]]],
  [Object.isExtensible, [["o"]]],
  [Object.keys, [["o"]]],
  [Function.prototype.apply, [["thisArg","?argArray"]]],
  [Function.prototype.call, [["thisArg","...argArray"]]],
  [Function.prototype.bind, [["thisArg","...argArray"]]],
  [global.Function, [["...args"]]],
  [String.prototype.charAt, [["pos"]]],
  [String.prototype.charCodeAt, [["index"]]],
  [String.prototype.concat, [["...strings"]]],
  [String.prototype.indexOf, [["searchString","?position"]]],
  [String.prototype.lastIndexOf, [["searchString","?position"]]],
  [String.prototype.localeCompare, [["that"],["that","?locales","?options"]]],
  [String.prototype.match, [["regexp"],["matcher"]]],
  [String.prototype.replace, [["searchValue","replaceValue"],["searchValue","replacer"]]],
  [String.prototype.search, [["regexp"],["searcher"]]],
  [String.prototype.slice, [["?start","?end"]]],
  [String.prototype.split, [["separator","?limit"],["splitter","?limit"]]],
  [String.prototype.substring, [["start","?end"]]],
  [String.prototype.substr, [["from","?length"]]],
  [global.String, [["?value"]]],
  [String.fromCharCode, [["...codes"]]],
  [global.Boolean, [["?value"]]],
  [Number.prototype.toString, [["?radix"]]],
  [Number.prototype.toFixed, [["?fractionDigits"]]],
  [Number.prototype.toExponential, [["?fractionDigits"]]],
  [Number.prototype.toPrecision, [["?precision"]]],
  [global.Number, [["?value"]]],
  [Math.abs, [["x"]]],
  [Math.acos, [["x"]]],
  [Math.asin, [["x"]]],
  [Math.atan, [["x"]]],
  [Math.atan2, [["y","x"]]],
  [Math.ceil, [["x"]]],
  [Math.cos, [["x"]]],
  [Math.exp, [["x"]]],
  [Math.floor, [["x"]]],
  [Math.log, [["x"]]],
  [Math.max, [["...values"]]],
  [Math.min, [["...values"]]],
  [Math.pow, [["x","y"]]],
  [Math.round, [["x"]]],
  [Math.sin, [["x"]]],
  [Math.sqrt, [["x"]]],
  [Math.tan, [["x"]]],
  [Date.prototype.setTime, [["time"]]],
  [Date.prototype.setMilliseconds, [["ms"]]],
  [Date.prototype.setUTCMilliseconds, [["ms"]]],
  [Date.prototype.setSeconds, [["sec","?ms"]]],
  [Date.prototype.setUTCSeconds, [["sec","?ms"]]],
  [Date.prototype.setMinutes, [["min","?sec","?ms"]]],
  [Date.prototype.setUTCMinutes, [["min","?sec","?ms"]]],
  [Date.prototype.setHours, [["hours","?min","?sec","?ms"]]],
  [Date.prototype.setUTCHours, [["hours","?min","?sec","?ms"]]],
  [Date.prototype.setDate, [["date"]]],
  [Date.prototype.setUTCDate, [["date"]]],
  [Date.prototype.setMonth, [["month","?date"]]],
  [Date.prototype.setUTCMonth, [["month","?date"]]],
  [Date.prototype.setFullYear, [["year","?month","?date"]]],
  [Date.prototype.setUTCFullYear, [["year","?month","?date"]]],
  [Date.prototype.toJSON, [["?key"]]],
  [global.Date, [["value"],["year","month","?date","?hours","?minutes","?seconds","?ms"]]],
  [Date.parse, [["s"]]],
  [Date.UTC, [["year","month","?date","?hours","?minutes","?seconds","?ms"]]],
  [RegExp.prototype.exec, [["string"]]],
  [RegExp.prototype.test, [["string"]]],
  [global.RegExp, [["pattern"],["pattern","?flags"]]],
  [global.Error, [["?message"]]],
  [global.EvalError, [["?message"]]],
  [global.RangeError, [["?message"]]],
  [global.ReferenceError, [["?message"]]],
  [global.SyntaxError, [["?message"]]],
  [global.TypeError, [["?message"]]],
  [global.URIError, [["?message"]]],
  [JSON.parse, [["text","?reviver"]]],
  [JSON.stringify, [["value","?replacer","?space"]]],
  [Array.prototype.push, [["...items"]]],
  [Array.prototype.concat, [["...items"]]],
  [Array.prototype.join, [["?separator"]]],
  [Array.prototype.slice, [["?start","?end"]]],
  [Array.prototype.sort, [["?compareFn"]]],
  [Array.prototype.splice, [["start","?deleteCount"],["start","deleteCount","...items"]]],
  [Array.prototype.unshift, [["...items"]]],
  [Array.prototype.indexOf, [["searchElement","?fromIndex"]]],
  [Array.prototype.lastIndexOf, [["searchElement","?fromIndex"]]],
  [Array.prototype.every, [["callbackfn","?thisArg"]]],
  [Array.prototype.some, [["callbackfn","?thisArg"]]],
  [Array.prototype.forEach, [["callbackfn","?thisArg"]]],
  [Array.prototype.map, [["callbackfn","?thisArg"]]],
  [Array.prototype.filter, [["callbackfn","?thisArg"]]],
  [Array.prototype.reduce, [["callbackfn"],["callbackfn","initialValue"]]],
  [Array.prototype.reduceRight, [["callbackfn"],["callbackfn","initialValue"]]],
  [Array.isArray, [["arg"]]],
  [Promise.prototype.then, [["?onfulfilled","?onrejected"]]],
  [Promise.prototype.catch, [["?onrejected"]]],
  [ArrayBuffer.prototype.slice, [["begin","?end"]]],
  [global.ArrayBuffer, [["byteLength"]]],
  [ArrayBuffer.isView, [["arg"]]],
  [DataView.prototype.getFloat32, [["byteOffset","?littleEndian"]]],
  [DataView.prototype.getFloat64, [["byteOffset","?littleEndian"]]],
  [DataView.prototype.getInt8, [["byteOffset"]]],
  [DataView.prototype.getInt16, [["byteOffset","?littleEndian"]]],
  [DataView.prototype.getInt32, [["byteOffset","?littleEndian"]]],
  [DataView.prototype.getUint8, [["byteOffset"]]],
  [DataView.prototype.getUint16, [["byteOffset","?littleEndian"]]],
  [DataView.prototype.getUint32, [["byteOffset","?littleEndian"]]],
  [DataView.prototype.setFloat32, [["byteOffset","value","?littleEndian"]]],
  [DataView.prototype.setFloat64, [["byteOffset","value","?littleEndian"]]],
  [DataView.prototype.setInt8, [["byteOffset","value"]]],
  [DataView.prototype.setInt16, [["byteOffset","value","?littleEndian"]]],
  [DataView.prototype.setInt32, [["byteOffset","value","?littleEndian"]]],
  [DataView.prototype.setUint8, [["byteOffset","value"]]],
  [DataView.prototype.setUint16, [["byteOffset","value","?littleEndian"]]],
  [DataView.prototype.setUint32, [["byteOffset","value","?littleEndian"]]],
  [global.DataView, [["buffer","?byteOffset","?byteLength"]]],
  [Int8Array.prototype.copyWithin, [["target","start","?end"]]],
  [Int8Array.prototype.every, [["callbackfn","?thisArg"]]],
  [Int8Array.prototype.fill, [["value","?start","?end"]]],
  [Int8Array.prototype.filter, [["callbackfn","?thisArg"]]],
  [Int8Array.prototype.find, [["predicate","?thisArg"]]],
  [Int8Array.prototype.findIndex, [["predicate","?thisArg"]]],
  [Int8Array.prototype.forEach, [["callbackfn","?thisArg"]]],
  [Int8Array.prototype.indexOf, [["searchElement","?fromIndex"]]],
  [Int8Array.prototype.join, [["?separator"]]],
  [Int8Array.prototype.lastIndexOf, [["searchElement","?fromIndex"]]],
  [Int8Array.prototype.map, [["callbackfn","?thisArg"]]],
  [Int8Array.prototype.reduce, [["callbackfn"],["callbackfn","initialValue"]]],
  [Int8Array.prototype.reduceRight, [["callbackfn"],["callbackfn","initialValue"]]],
  [Int8Array.prototype.set, [["array","?offset"]]],
  [Int8Array.prototype.slice, [["?start","?end"]]],
  [Int8Array.prototype.some, [["callbackfn","?thisArg"]]],
  [Int8Array.prototype.sort, [["?compareFn"]]],
  [Int8Array.prototype.subarray, [["begin","?end"]]],
  [global.Int8Array, [["length"],["arrayOrArrayBuffer"],["elements"],["buffer","byteOffset","?length"]]],
  [Int8Array.of, [["...items"]]],
  [Int8Array.from, [["arrayLike"],["arrayLike","mapfn","?thisArg"],["arrayLike","?mapfn","?thisArg"]]],
  [Uint8Array.prototype.copyWithin, [["target","start","?end"]]],
  [Uint8Array.prototype.every, [["callbackfn","?thisArg"]]],
  [Uint8Array.prototype.fill, [["value","?start","?end"]]],
  [Uint8Array.prototype.filter, [["callbackfn","?thisArg"]]],
  [Uint8Array.prototype.find, [["predicate","?thisArg"]]],
  [Uint8Array.prototype.findIndex, [["predicate","?thisArg"]]],
  [Uint8Array.prototype.forEach, [["callbackfn","?thisArg"]]],
  [Uint8Array.prototype.indexOf, [["searchElement","?fromIndex"]]],
  [Uint8Array.prototype.join, [["?separator"]]],
  [Uint8Array.prototype.lastIndexOf, [["searchElement","?fromIndex"]]],
  [Uint8Array.prototype.map, [["callbackfn","?thisArg"]]],
  [Uint8Array.prototype.reduce, [["callbackfn"],["callbackfn","initialValue"]]],
  [Uint8Array.prototype.reduceRight, [["callbackfn"],["callbackfn","initialValue"]]],
  [Uint8Array.prototype.set, [["array","?offset"]]],
  [Uint8Array.prototype.slice, [["?start","?end"]]],
  [Uint8Array.prototype.some, [["callbackfn","?thisArg"]]],
  [Uint8Array.prototype.sort, [["?compareFn"]]],
  [Uint8Array.prototype.subarray, [["begin","?end"]]],
  [global.Uint8Array, [["length"],["arrayOrArrayBuffer"],["elements"],["buffer","byteOffset","?length"]]],
  [Uint8Array.of, [["...items"]]],
  [Uint8Array.from, [["arrayLike"],["arrayLike","mapfn","?thisArg"],["arrayLike","?mapfn","?thisArg"]]],
  [Uint8ClampedArray.prototype.copyWithin, [["target","start","?end"]]],
  [Uint8ClampedArray.prototype.every, [["callbackfn","?thisArg"]]],
  [Uint8ClampedArray.prototype.fill, [["value","?start","?end"]]],
  [Uint8ClampedArray.prototype.filter, [["callbackfn","?thisArg"]]],
  [Uint8ClampedArray.prototype.find, [["predicate","?thisArg"]]],
  [Uint8ClampedArray.prototype.findIndex, [["predicate","?thisArg"]]],
  [Uint8ClampedArray.prototype.forEach, [["callbackfn","?thisArg"]]],
  [Uint8ClampedArray.prototype.indexOf, [["searchElement","?fromIndex"]]],
  [Uint8ClampedArray.prototype.join, [["?separator"]]],
  [Uint8ClampedArray.prototype.lastIndexOf, [["searchElement","?fromIndex"]]],
  [Uint8ClampedArray.prototype.map, [["callbackfn","?thisArg"]]],
  [Uint8ClampedArray.prototype.reduce, [["callbackfn"],["callbackfn","initialValue"]]],
  [Uint8ClampedArray.prototype.reduceRight, [["callbackfn"],["callbackfn","initialValue"]]],
  [Uint8ClampedArray.prototype.set, [["array","?offset"]]],
  [Uint8ClampedArray.prototype.slice, [["?start","?end"]]],
  [Uint8ClampedArray.prototype.some, [["callbackfn","?thisArg"]]],
  [Uint8ClampedArray.prototype.sort, [["?compareFn"]]],
  [Uint8ClampedArray.prototype.subarray, [["begin","?end"]]],
  [global.Uint8ClampedArray, [["length"],["arrayOrArrayBuffer"],["elements"],["buffer","byteOffset","?length"]]],
  [Uint8ClampedArray.of, [["...items"]]],
  [Uint8ClampedArray.from, [["arrayLike"],["arrayLike","mapfn","?thisArg"],["arrayLike","?mapfn","?thisArg"]]],
  [Int16Array.prototype.copyWithin, [["target","start","?end"]]],
  [Int16Array.prototype.every, [["callbackfn","?thisArg"]]],
  [Int16Array.prototype.fill, [["value","?start","?end"]]],
  [Int16Array.prototype.filter, [["callbackfn","?thisArg"]]],
  [Int16Array.prototype.find, [["predicate","?thisArg"]]],
  [Int16Array.prototype.findIndex, [["predicate","?thisArg"]]],
  [Int16Array.prototype.forEach, [["callbackfn","?thisArg"]]],
  [Int16Array.prototype.indexOf, [["searchElement","?fromIndex"]]],
  [Int16Array.prototype.join, [["?separator"]]],
  [Int16Array.prototype.lastIndexOf, [["searchElement","?fromIndex"]]],
  [Int16Array.prototype.map, [["callbackfn","?thisArg"]]],
  [Int16Array.prototype.reduce, [["callbackfn"],["callbackfn","initialValue"]]],
  [Int16Array.prototype.reduceRight, [["callbackfn"],["callbackfn","initialValue"]]],
  [Int16Array.prototype.set, [["array","?offset"]]],
  [Int16Array.prototype.slice, [["?start","?end"]]],
  [Int16Array.prototype.some, [["callbackfn","?thisArg"]]],
  [Int16Array.prototype.sort, [["?compareFn"]]],
  [Int16Array.prototype.subarray, [["begin","?end"]]],
  [global.Int16Array, [["length"],["arrayOrArrayBuffer"],["elements"],["buffer","byteOffset","?length"]]],
  [Int16Array.of, [["...items"]]],
  [Int16Array.from, [["arrayLike"],["arrayLike","mapfn","?thisArg"],["arrayLike","?mapfn","?thisArg"]]],
  [Uint16Array.prototype.copyWithin, [["target","start","?end"]]],
  [Uint16Array.prototype.every, [["callbackfn","?thisArg"]]],
  [Uint16Array.prototype.fill, [["value","?start","?end"]]],
  [Uint16Array.prototype.filter, [["callbackfn","?thisArg"]]],
  [Uint16Array.prototype.find, [["predicate","?thisArg"]]],
  [Uint16Array.prototype.findIndex, [["predicate","?thisArg"]]],
  [Uint16Array.prototype.forEach, [["callbackfn","?thisArg"]]],
  [Uint16Array.prototype.indexOf, [["searchElement","?fromIndex"]]],
  [Uint16Array.prototype.join, [["?separator"]]],
  [Uint16Array.prototype.lastIndexOf, [["searchElement","?fromIndex"]]],
  [Uint16Array.prototype.map, [["callbackfn","?thisArg"]]],
  [Uint16Array.prototype.reduce, [["callbackfn"],["callbackfn","initialValue"]]],
  [Uint16Array.prototype.reduceRight, [["callbackfn"],["callbackfn","initialValue"]]],
  [Uint16Array.prototype.set, [["array","?offset"]]],
  [Uint16Array.prototype.slice, [["?start","?end"]]],
  [Uint16Array.prototype.some, [["callbackfn","?thisArg"]]],
  [Uint16Array.prototype.sort, [["?compareFn"]]],
  [Uint16Array.prototype.subarray, [["begin","?end"]]],
  [global.Uint16Array, [["length"],["arrayOrArrayBuffer"],["elements"],["buffer","byteOffset","?length"]]],
  [Uint16Array.of, [["...items"]]],
  [Uint16Array.from, [["arrayLike"],["arrayLike","mapfn","?thisArg"],["arrayLike","?mapfn","?thisArg"]]],
  [Int32Array.prototype.copyWithin, [["target","start","?end"]]],
  [Int32Array.prototype.every, [["callbackfn","?thisArg"]]],
  [Int32Array.prototype.fill, [["value","?start","?end"]]],
  [Int32Array.prototype.filter, [["callbackfn","?thisArg"]]],
  [Int32Array.prototype.find, [["predicate","?thisArg"]]],
  [Int32Array.prototype.findIndex, [["predicate","?thisArg"]]],
  [Int32Array.prototype.forEach, [["callbackfn","?thisArg"]]],
  [Int32Array.prototype.indexOf, [["searchElement","?fromIndex"]]],
  [Int32Array.prototype.join, [["?separator"]]],
  [Int32Array.prototype.lastIndexOf, [["searchElement","?fromIndex"]]],
  [Int32Array.prototype.map, [["callbackfn","?thisArg"]]],
  [Int32Array.prototype.reduce, [["callbackfn"],["callbackfn","initialValue"]]],
  [Int32Array.prototype.reduceRight, [["callbackfn"],["callbackfn","initialValue"]]],
  [Int32Array.prototype.set, [["array","?offset"]]],
  [Int32Array.prototype.slice, [["?start","?end"]]],
  [Int32Array.prototype.some, [["callbackfn","?thisArg"]]],
  [Int32Array.prototype.sort, [["?compareFn"]]],
  [Int32Array.prototype.subarray, [["begin","?end"]]],
  [global.Int32Array, [["length"],["arrayOrArrayBuffer"],["elements"],["buffer","byteOffset","?length"]]],
  [Int32Array.of, [["...items"]]],
  [Int32Array.from, [["arrayLike"],["arrayLike","mapfn","?thisArg"],["arrayLike","?mapfn","?thisArg"]]],
  [Uint32Array.prototype.copyWithin, [["target","start","?end"]]],
  [Uint32Array.prototype.every, [["callbackfn","?thisArg"]]],
  [Uint32Array.prototype.fill, [["value","?start","?end"]]],
  [Uint32Array.prototype.filter, [["callbackfn","?thisArg"]]],
  [Uint32Array.prototype.find, [["predicate","?thisArg"]]],
  [Uint32Array.prototype.findIndex, [["predicate","?thisArg"]]],
  [Uint32Array.prototype.forEach, [["callbackfn","?thisArg"]]],
  [Uint32Array.prototype.indexOf, [["searchElement","?fromIndex"]]],
  [Uint32Array.prototype.join, [["?separator"]]],
  [Uint32Array.prototype.lastIndexOf, [["searchElement","?fromIndex"]]],
  [Uint32Array.prototype.map, [["callbackfn","?thisArg"]]],
  [Uint32Array.prototype.reduce, [["callbackfn"],["callbackfn","initialValue"]]],
  [Uint32Array.prototype.reduceRight, [["callbackfn"],["callbackfn","initialValue"]]],
  [Uint32Array.prototype.set, [["array","?offset"]]],
  [Uint32Array.prototype.slice, [["?start","?end"]]],
  [Uint32Array.prototype.some, [["callbackfn","?thisArg"]]],
  [Uint32Array.prototype.sort, [["?compareFn"]]],
  [Uint32Array.prototype.subarray, [["begin","?end"]]],
  [global.Uint32Array, [["length"],["arrayOrArrayBuffer"],["elements"],["buffer","byteOffset","?length"]]],
  [Uint32Array.of, [["...items"]]],
  [Uint32Array.from, [["arrayLike"],["arrayLike","mapfn","?thisArg"],["arrayLike","?mapfn","?thisArg"]]],
  [Float32Array.prototype.copyWithin, [["target","start","?end"]]],
  [Float32Array.prototype.every, [["callbackfn","?thisArg"]]],
  [Float32Array.prototype.fill, [["value","?start","?end"]]],
  [Float32Array.prototype.filter, [["callbackfn","?thisArg"]]],
  [Float32Array.prototype.find, [["predicate","?thisArg"]]],
  [Float32Array.prototype.findIndex, [["predicate","?thisArg"]]],
  [Float32Array.prototype.forEach, [["callbackfn","?thisArg"]]],
  [Float32Array.prototype.indexOf, [["searchElement","?fromIndex"]]],
  [Float32Array.prototype.join, [["?separator"]]],
  [Float32Array.prototype.lastIndexOf, [["searchElement","?fromIndex"]]],
  [Float32Array.prototype.map, [["callbackfn","?thisArg"]]],
  [Float32Array.prototype.reduce, [["callbackfn"],["callbackfn","initialValue"]]],
  [Float32Array.prototype.reduceRight, [["callbackfn"],["callbackfn","initialValue"]]],
  [Float32Array.prototype.set, [["array","?offset"]]],
  [Float32Array.prototype.slice, [["?start","?end"]]],
  [Float32Array.prototype.some, [["callbackfn","?thisArg"]]],
  [Float32Array.prototype.sort, [["?compareFn"]]],
  [Float32Array.prototype.subarray, [["begin","?end"]]],
  [global.Float32Array, [["length"],["arrayOrArrayBuffer"],["elements"],["buffer","byteOffset","?length"]]],
  [Float32Array.of, [["...items"]]],
  [Float32Array.from, [["arrayLike"],["arrayLike","mapfn","?thisArg"],["arrayLike","?mapfn","?thisArg"]]],
  [Float64Array.prototype.copyWithin, [["target","start","?end"]]],
  [Float64Array.prototype.every, [["callbackfn","?thisArg"]]],
  [Float64Array.prototype.fill, [["value","?start","?end"]]],
  [Float64Array.prototype.filter, [["callbackfn","?thisArg"]]],
  [Float64Array.prototype.find, [["predicate","?thisArg"]]],
  [Float64Array.prototype.findIndex, [["predicate","?thisArg"]]],
  [Float64Array.prototype.forEach, [["callbackfn","?thisArg"]]],
  [Float64Array.prototype.indexOf, [["searchElement","?fromIndex"]]],
  [Float64Array.prototype.join, [["?separator"]]],
  [Float64Array.prototype.lastIndexOf, [["searchElement","?fromIndex"]]],
  [Float64Array.prototype.map, [["callbackfn","?thisArg"]]],
  [Float64Array.prototype.reduce, [["callbackfn"],["callbackfn","initialValue"]]],
  [Float64Array.prototype.reduceRight, [["callbackfn"],["callbackfn","initialValue"]]],
  [Float64Array.prototype.set, [["array","?offset"]]],
  [Float64Array.prototype.slice, [["?start","?end"]]],
  [Float64Array.prototype.some, [["callbackfn","?thisArg"]]],
  [Float64Array.prototype.sort, [["?compareFn"]]],
  [Float64Array.prototype.subarray, [["begin","?end"]]],
  [global.Float64Array, [["length"],["arrayOrArrayBuffer"],["elements"],["buffer","byteOffset","?length"]]],
  [Float64Array.of, [["...items"]]],
  [Float64Array.from, [["arrayLike"],["arrayLike","mapfn","?thisArg"],["arrayLike","?mapfn","?thisArg"]]],
  [Number.prototype.toLocaleString, [["?locales","?options"]]],
  [Date.prototype.toLocaleString, [["?locales","?options"]]],
  [Date.prototype.toLocaleDateString, [["?locales","?options"]]],
  [Date.prototype.toLocaleTimeString, [["?locales","?options"]]],
  [Array.prototype.find, [["predicate","?thisArg"]]],
  [Array.prototype.findIndex, [["predicate","?thisArg"]]],
  [Array.prototype.fill, [["value","?start","?end"]]],
  [Array.prototype.copyWithin, [["target","start","?end"]]],
  [Array.from, [["arrayLike"],["iterable"],["arrayLike","mapfn","?thisArg"],["iterable","mapfn","?thisArg"]]],
  [Array.of, [["...items"]]],
  [Math.clz32, [["x"]]],
  [Math.imul, [["x","y"]]],
  [Math.sign, [["x"]]],
  [Math.log10, [["x"]]],
  [Math.log2, [["x"]]],
  [Math.log1p, [["x"]]],
  [Math.expm1, [["x"]]],
  [Math.cosh, [["x"]]],
  [Math.sinh, [["x"]]],
  [Math.tanh, [["x"]]],
  [Math.acosh, [["x"]]],
  [Math.asinh, [["x"]]],
  [Math.atanh, [["x"]]],
  [Math.hypot, [["...values"]]],
  [Math.trunc, [["x"]]],
  [Math.fround, [["x"]]],
  [Math.cbrt, [["x"]]],
  [Number.isFinite, [["number"]]],
  [Number.isInteger, [["number"]]],
  [Number.isNaN, [["number"]]],
  [Number.isSafeInteger, [["number"]]],
  [Number.parseFloat, [["string"]]],
  [Number.parseInt, [["string","?radix"]]],
  [Object.assign, [["target","source"],["target","...sources"],["target","source1","source2"],["target","source1","source2","source3"]]],
  [Object.getOwnPropertySymbols, [["o"]]],
  [Object.is, [["value1","value2"]]],
  [Object.setPrototypeOf, [["o","proto"]]],
  [String.prototype.codePointAt, [["pos"]]],
  [String.prototype.includes, [["searchString","?position"]]],
  [String.prototype.endsWith, [["searchString","?endPosition"]]],
  [String.prototype.normalize, [["form"],["?form"]]],
  [String.prototype.repeat, [["count"]]],
  [String.prototype.startsWith, [["searchString","?position"]]],
  [String.prototype.anchor, [["name"]]],
  [String.prototype.fontcolor, [["color"]]],
  [String.prototype.fontsize, [["size"]]],
  [String.prototype.link, [["url"]]],
  [String.fromCodePoint, [["...codePoints"]]],
  [String.raw, [["template","...substitutions"]]],
  [Map.prototype.delete, [["key"]]],
  [Map.prototype.forEach, [["callbackfn","?thisArg"]]],
  [Map.prototype.get, [["key"]]],
  [Map.prototype.has, [["key"]]],
  [Map.prototype.set, [["key","value"]]],
  [global.Map, [["?entries"],["iterable"]]],
  [WeakMap.prototype.delete, [["key"]]],
  [WeakMap.prototype.get, [["key"]]],
  [WeakMap.prototype.has, [["key"]]],
  [WeakMap.prototype.set, [["key","value"]]],
  [global.WeakMap, [["?entries"],["iterable"]]],
  [Set.prototype.add, [["value"]]],
  [Set.prototype.delete, [["value"]]],
  [Set.prototype.forEach, [["callbackfn","?thisArg"]]],
  [Set.prototype.has, [["value"]]],
  [global.Set, [["?values"],["?iterable"]]],
  [WeakSet.prototype.add, [["value"]]],
  [WeakSet.prototype.delete, [["value"]]],
  [WeakSet.prototype.has, [["value"]]],
  [global.WeakSet, [["?values"],["iterable"]]],
  [Promise.all, [["values"]]],
  [Promise.race, [["values"]]],
  [global.Promise, [["executor"]]],
  [Promise.reject, [["?reason"]]],
  [Promise.resolve, [["value"]]],
  [Proxy.revocable, [["target","handler"]]],
  [Reflect.apply, [["target","thisArgument","argumentsList"]]],
  [Reflect.construct, [["target","argumentsList","?newTarget"]]],
  [Reflect.defineProperty, [["target","propertyKey","attributes"]]],
  [Reflect.deleteProperty, [["target","propertyKey"]]],
  [Reflect.get, [["target","propertyKey","?receiver"]]],
  [Reflect.getOwnPropertyDescriptor, [["target","propertyKey"]]],
  [Reflect.getPrototypeOf, [["target"]]],
  [Reflect.has, [["target","propertyKey"]]],
  [Reflect.isExtensible, [["target"]]],
  [Reflect.ownKeys, [["target"]]],
  [Reflect.preventExtensions, [["target"]]],
  [Reflect.set, [["target","propertyKey","value","?receiver"]]],
  [Reflect.setPrototypeOf, [["target","proto"]]],
  [Symbol.for, [["key"]]],
  [Symbol.keyFor, [["sym"]]],
  [Array.prototype.includes, [["searchElement","?fromIndex"]]],
  [Int8Array.prototype.includes, [["searchElement","?fromIndex"]]],
  [Uint8Array.prototype.includes, [["searchElement","?fromIndex"]]],
  [Uint8ClampedArray.prototype.includes, [["searchElement","?fromIndex"]]],
  [Int16Array.prototype.includes, [["searchElement","?fromIndex"]]],
  [Uint16Array.prototype.includes, [["searchElement","?fromIndex"]]],
  [Int32Array.prototype.includes, [["searchElement","?fromIndex"]]],
  [Uint32Array.prototype.includes, [["searchElement","?fromIndex"]]],
  [Float32Array.prototype.includes, [["searchElement","?fromIndex"]]],
  [Float64Array.prototype.includes, [["searchElement","?fromIndex"]]],
  [Object.values, [["o"]]],
  [Object.entries, [["o"]]],
  [Object.getOwnPropertyDescriptors, [["o"]]],
  [SharedArrayBuffer.prototype.slice, [["begin","?end"]]],
  [global.SharedArrayBuffer, [["byteLength"]]],
  [Atomics.add, [["typedArray","index","value"]]],
  [Atomics.and, [["typedArray","index","value"]]],
  [Atomics.compareExchange, [["typedArray","index","expectedValue","replacementValue"]]],
  [Atomics.exchange, [["typedArray","index","value"]]],
  [Atomics.isLockFree, [["size"]]],
  [Atomics.load, [["typedArray","index"]]],
  [Atomics.or, [["typedArray","index","value"]]],
  [Atomics.store, [["typedArray","index","value"]]],
  [Atomics.sub, [["typedArray","index","value"]]],
  [Atomics.wait, [["typedArray","index","value","?timeout"]]],
  [Atomics.notify, [["typedArray","index","count"]]],
  [Atomics.xor, [["typedArray","index","value"]]],
  [String.prototype.padStart, [["maxLength","?fillString"]]],
  [String.prototype.padEnd, [["maxLength","?fillString"]]],
  [Promise.prototype.finally, [["?onfinally"]]],
  [Array.prototype.flatMap, [["callback","?thisArg"]]],
  [Array.prototype.flat, [["depth"],["?depth"]]],
  [Object.fromEntries, [["entries"]]],
  [BigInt.prototype.toString, [["?radix"]]],
  [BigInt.asIntN, [["bits","int"]]],
  [BigInt.asUintN, [["bits","int"]]],
  [BigInt64Array.prototype.copyWithin, [["target","start","?end"]]],
  [BigInt64Array.prototype.every, [["callbackfn","?thisArg"]]],
  [BigInt64Array.prototype.fill, [["value","?start","?end"]]],
  [BigInt64Array.prototype.filter, [["callbackfn","?thisArg"]]],
  [BigInt64Array.prototype.find, [["predicate","?thisArg"]]],
  [BigInt64Array.prototype.findIndex, [["predicate","?thisArg"]]],
  [BigInt64Array.prototype.forEach, [["callbackfn","?thisArg"]]],
  [BigInt64Array.prototype.includes, [["searchElement","?fromIndex"]]],
  [BigInt64Array.prototype.indexOf, [["searchElement","?fromIndex"]]],
  [BigInt64Array.prototype.join, [["?separator"]]],
  [BigInt64Array.prototype.lastIndexOf, [["searchElement","?fromIndex"]]],
  [BigInt64Array.prototype.map, [["callbackfn","?thisArg"]]],
  [BigInt64Array.prototype.reduce, [["callbackfn"],["callbackfn","initialValue"]]],
  [BigInt64Array.prototype.reduceRight, [["callbackfn"],["callbackfn","initialValue"]]],
  [BigInt64Array.prototype.set, [["array","?offset"]]],
  [BigInt64Array.prototype.slice, [["?start","?end"]]],
  [BigInt64Array.prototype.some, [["callbackfn","?thisArg"]]],
  [BigInt64Array.prototype.sort, [["?compareFn"]]],
  [BigInt64Array.prototype.subarray, [["begin","?end"]]],
  [global.BigInt64Array, [["?length"],["array"],["buffer","?byteOffset","?length"]]],
  [BigInt64Array.of, [["...items"]]],
  [BigInt64Array.from, [["arrayLike"],["arrayLike","mapfn","?thisArg"]]],
  [BigUint64Array.prototype.copyWithin, [["target","start","?end"]]],
  [BigUint64Array.prototype.every, [["callbackfn","?thisArg"]]],
  [BigUint64Array.prototype.fill, [["value","?start","?end"]]],
  [BigUint64Array.prototype.filter, [["callbackfn","?thisArg"]]],
  [BigUint64Array.prototype.find, [["predicate","?thisArg"]]],
  [BigUint64Array.prototype.findIndex, [["predicate","?thisArg"]]],
  [BigUint64Array.prototype.forEach, [["callbackfn","?thisArg"]]],
  [BigUint64Array.prototype.includes, [["searchElement","?fromIndex"]]],
  [BigUint64Array.prototype.indexOf, [["searchElement","?fromIndex"]]],
  [BigUint64Array.prototype.join, [["?separator"]]],
  [BigUint64Array.prototype.lastIndexOf, [["searchElement","?fromIndex"]]],
  [BigUint64Array.prototype.map, [["callbackfn","?thisArg"]]],
  [BigUint64Array.prototype.reduce, [["callbackfn"],["callbackfn","initialValue"]]],
  [BigUint64Array.prototype.reduceRight, [["callbackfn"],["callbackfn","initialValue"]]],
  [BigUint64Array.prototype.set, [["array","?offset"]]],
  [BigUint64Array.prototype.slice, [["?start","?end"]]],
  [BigUint64Array.prototype.some, [["callbackfn","?thisArg"]]],
  [BigUint64Array.prototype.sort, [["?compareFn"]]],
  [BigUint64Array.prototype.subarray, [["begin","?end"]]],
  [global.BigUint64Array, [["?length"],["array"],["buffer","?byteOffset","?length"]]],
  [BigUint64Array.of, [["...items"]]],
  [BigUint64Array.from, [["arrayLike"],["arrayLike","mapfn","?thisArg"]]],
  [DataView.prototype.getBigInt64, [["byteOffset","?littleEndian"]]],
  [DataView.prototype.getBigUint64, [["byteOffset","?littleEndian"]]],
  [DataView.prototype.setBigInt64, [["byteOffset","value","?littleEndian"]]],
  [DataView.prototype.setBigUint64, [["byteOffset","value","?littleEndian"]]],
  [Error.captureStackTrace, [["targetObject","?constructorOpt"]]],
  [global.setTimeout, [["callback","ms","...args"]]],
  [global.clearTimeout, [["timeoutId"]]],
  [global.setInterval, [["callback","ms","...args"]]],
  [global.clearInterval, [["intervalId"]]],
  [global.setImmediate, [["callback","...args"]]],
  [global.clearImmediate, [["immediateId"]]],
  [Buffer.prototype.write, [["string","?offset","?length","?encoding"]]],
  [Buffer.prototype.toString, [["?encoding","?start","?end"]]],
  [Buffer.prototype.equals, [["otherBuffer"]]],
  [Buffer.prototype.compare, [["otherBuffer","?targetStart","?targetEnd","?sourceStart","?sourceEnd"]]],
  [Buffer.prototype.copy, [["targetBuffer","?targetStart","?sourceStart","?sourceEnd"]]],
  [Buffer.prototype.slice, [["?start","?end"]]],
  [Buffer.prototype.writeUIntLE, [["value","offset","byteLength","?noAssert"]]],
  [Buffer.prototype.writeUIntBE, [["value","offset","byteLength","?noAssert"]]],
  [Buffer.prototype.writeIntLE, [["value","offset","byteLength","?noAssert"]]],
  [Buffer.prototype.writeIntBE, [["value","offset","byteLength","?noAssert"]]],
  [Buffer.prototype.readUIntLE, [["offset","byteLength","?noAssert"]]],
  [Buffer.prototype.readUIntBE, [["offset","byteLength","?noAssert"]]],
  [Buffer.prototype.readIntLE, [["offset","byteLength","?noAssert"]]],
  [Buffer.prototype.readIntBE, [["offset","byteLength","?noAssert"]]],
  [Buffer.prototype.readUInt8, [["offset","?noAssert"]]],
  [Buffer.prototype.readUInt16LE, [["offset","?noAssert"]]],
  [Buffer.prototype.readUInt16BE, [["offset","?noAssert"]]],
  [Buffer.prototype.readUInt32LE, [["offset","?noAssert"]]],
  [Buffer.prototype.readUInt32BE, [["offset","?noAssert"]]],
  [Buffer.prototype.readInt8, [["offset","?noAssert"]]],
  [Buffer.prototype.readInt16LE, [["offset","?noAssert"]]],
  [Buffer.prototype.readInt16BE, [["offset","?noAssert"]]],
  [Buffer.prototype.readInt32LE, [["offset","?noAssert"]]],
  [Buffer.prototype.readInt32BE, [["offset","?noAssert"]]],
  [Buffer.prototype.readFloatLE, [["offset","?noAssert"]]],
  [Buffer.prototype.readFloatBE, [["offset","?noAssert"]]],
  [Buffer.prototype.readDoubleLE, [["offset","?noAssert"]]],
  [Buffer.prototype.readDoubleBE, [["offset","?noAssert"]]],
  [Buffer.prototype.writeUInt8, [["value","offset","?noAssert"]]],
  [Buffer.prototype.writeUInt16LE, [["value","offset","?noAssert"]]],
  [Buffer.prototype.writeUInt16BE, [["value","offset","?noAssert"]]],
  [Buffer.prototype.writeUInt32LE, [["value","offset","?noAssert"]]],
  [Buffer.prototype.writeUInt32BE, [["value","offset","?noAssert"]]],
  [Buffer.prototype.writeInt8, [["value","offset","?noAssert"]]],
  [Buffer.prototype.writeInt16LE, [["value","offset","?noAssert"]]],
  [Buffer.prototype.writeInt16BE, [["value","offset","?noAssert"]]],
  [Buffer.prototype.writeInt32LE, [["value","offset","?noAssert"]]],
  [Buffer.prototype.writeInt32BE, [["value","offset","?noAssert"]]],
  [Buffer.prototype.writeFloatLE, [["value","offset","?noAssert"]]],
  [Buffer.prototype.writeFloatBE, [["value","offset","?noAssert"]]],
  [Buffer.prototype.writeDoubleLE, [["value","offset","?noAssert"]]],
  [Buffer.prototype.writeDoubleBE, [["value","offset","?noAssert"]]],
  [Buffer.prototype.fill, [["value","?offset","?end"]]],
  [Buffer.prototype.indexOf, [["value","?byteOffset","?encoding"]]],
  [Buffer.prototype.lastIndexOf, [["value","?byteOffset","?encoding"]]],
  [Buffer.prototype.includes, [["value","?byteOffset","?encoding"]]],
  [async_hooks.createHook, [["options"]]],
  [buffer.transcode, [["source","fromEnc","toEnc"]]],
  [child_process.spawn, [["command","?options"],["command","?args","?options"]]],
  [child_process.exec, [["command","?callback"],["command","options","?callback"]]],
  [child_process.execFile, [["file"],["file","options"],["file","?args"],["file","callback"],["file","args","options"],["file","args","callback"],["file","options","callback"],["file","args","options","callback"]]],
  [child_process.fork, [["modulePath","?args","?options"]]],
  [child_process.spawnSync, [["command"],["command","?options"],["command","?args","?options"]]],
  [child_process.execSync, [["command"],["command","?options"]]],
  [child_process.execFileSync, [["command"],["command","?options"],["command","?args","?options"]]],
  [cluster.disconnect, [["?callback"]]],
  [cluster.fork, [["?env"]]],
  [cluster.setupMaster, [["?settings"]]],
  [cluster.addListener, [["event","listener"]]],
  [cluster.emit, [["event","...args"],["event","worker"],["event","settings"],["event","worker","address"],["event","worker","code","signal"],["event","worker","message","handle"]]],
  [cluster.on, [["event","listener"]]],
  [cluster.once, [["event","listener"]]],
  [cluster.removeListener, [["event","listener"]]],
  [cluster.removeAllListeners, [["?event"]]],
  [cluster.setMaxListeners, [["n"]]],
  [cluster.listeners, [["event"]]],
  [cluster.listenerCount, [["type"]]],
  [cluster.prependListener, [["event","listener"]]],
  [cluster.prependOnceListener, [["event","listener"]]],
  [crypto.createHash, [["algorithm","?options"]]],
  [crypto.createHmac, [["algorithm","key","?options"]]],
  [crypto.createCipher, [["algorithm","password","options"],["algorithm","password","?options"]]],
  [crypto.createCipheriv, [["algorithm","key","iv","options"],["algorithm","key","iv","?options"]]],
  [crypto.createDecipher, [["algorithm","password","options"],["algorithm","password","?options"]]],
  [crypto.createDecipheriv, [["algorithm","key","iv","options"],["algorithm","key","iv","?options"]]],
  [crypto.createSign, [["algorithm","?options"]]],
  [crypto.createVerify, [["algorith","?options"]]],
  [crypto.createDiffieHellman, [["prime"],["prime_length","?generator"],["prime","prime_encoding"],["prime","prime_encoding","generator"],["prime","prime_encoding","generator","generator_encoding"]]],
  [crypto.getDiffieHellman, [["group_name"]]],
  [crypto.pbkdf2, [["password","salt","iterations","keylen","digest","callback"]]],
  [crypto.pbkdf2Sync, [["password","salt","iterations","keylen","digest"]]],
  [crypto.randomBytes, [["size"],["size","callback"]]],
  [crypto.pseudoRandomBytes, [["size"],["size","callback"]]],
  [crypto.randomFillSync, [["buffer","?offset","?size"]]],
  [crypto.randomFill, [["buffer","callback"],["buffer","offset","callback"],["buffer","offset","size","callback"]]],
  [crypto.scrypt, [["password","salt","keylen","callback"],["password","salt","keylen","options","callback"]]],
  [crypto.scryptSync, [["password","salt","keylen","?options"]]],
  [crypto.publicEncrypt, [["public_key","buffer"]]],
  [crypto.privateDecrypt, [["private_key","buffer"]]],
  [crypto.privateEncrypt, [["private_key","buffer"]]],
  [crypto.publicDecrypt, [["public_key","buffer"]]],
  [crypto.createECDH, [["curve_name"]]],
  [crypto.timingSafeEqual, [["a","b"]]],
  [crypto.generateKeyPairSync, [["type","options"]]],
  [crypto.generateKeyPair, [["type","options","callback"]]],
  [dgram.createSocket, [["type","?callback"],["options","?callback"]]],
  [dns.lookup, [["hostname","callback"],["hostname","family","callback"],["hostname","options","callback"]]],
  [dns.lookupService, [["address","port","callback"]]],
  [dns.resolve, [["hostname","callback"],["hostname","rrtype","callback"]]],
  [dns.resolve4, [["hostname","callback"],["hostname","options","callback"]]],
  [dns.resolve6, [["hostname","callback"],["hostname","options","callback"]]],
  [dns.resolveCname, [["hostname","callback"]]],
  [dns.resolveMx, [["hostname","callback"]]],
  [dns.resolveNaptr, [["hostname","callback"]]],
  [dns.resolveNs, [["hostname","callback"]]],
  [dns.resolvePtr, [["hostname","callback"]]],
  [dns.resolveSoa, [["hostname","callback"]]],
  [dns.resolveSrv, [["hostname","callback"]]],
  [dns.resolveTxt, [["hostname","callback"]]],
  [dns.resolveAny, [["hostname","callback"]]],
  [dns.reverse, [["ip","callback"]]],
  [dns.setServers, [["servers"]]],
  [fs.rename, [["oldPath","newPath","callback"]]],
  [fs.renameSync, [["oldPath","newPath"]]],
  [fs.truncate, [["path","callback"],["path","len","callback"]]],
  [fs.truncateSync, [["path","?len"]]],
  [fs.ftruncate, [["fd","callback"],["fd","len","callback"]]],
  [fs.ftruncateSync, [["fd","?len"]]],
  [fs.chown, [["path","uid","gid","callback"]]],
  [fs.chownSync, [["path","uid","gid"]]],
  [fs.fchown, [["fd","uid","gid","callback"]]],
  [fs.fchownSync, [["fd","uid","gid"]]],
  [fs.lchown, [["path","uid","gid","callback"]]],
  [fs.lchownSync, [["path","uid","gid"]]],
  [fs.chmod, [["path","mode","callback"]]],
  [fs.chmodSync, [["path","mode"]]],
  [fs.fchmod, [["fd","mode","callback"]]],
  [fs.fchmodSync, [["fd","mode"]]],
  [fs.stat, [["path","callback"]]],
  [fs.statSync, [["path"]]],
  [fs.fstat, [["fd","callback"]]],
  [fs.fstatSync, [["fd"]]],
  [fs.lstat, [["path","callback"]]],
  [fs.lstatSync, [["path"]]],
  [fs.link, [["existingPath","newPath","callback"]]],
  [fs.linkSync, [["existingPath","newPath"]]],
  [fs.symlink, [["target","path","callback"],["target","path","type","callback"]]],
  [fs.symlinkSync, [["target","path","?type"]]],
  [fs.readlink, [["path","callback"],["path","options","callback"]]],
  [fs.readlinkSync, [["path","?options"],["path","options"]]],
  [fs.realpath, [["path","callback"],["path","options","callback"]]],
  [fs.realpathSync, [["path","?options"],["path","options"]]],
  [fs.unlink, [["path","callback"]]],
  [fs.unlinkSync, [["path"]]],
  [fs.rmdir, [["path","callback"]]],
  [fs.rmdirSync, [["path"]]],
  [fs.mkdir, [["path","callback"],["path","options","callback"]]],
  [fs.mkdirSync, [["path","?options"]]],
  [fs.mkdtemp, [["prefix","callback"],["prefix","options","callback"]]],
  [fs.mkdtempSync, [["prefix","?options"],["prefix","options"]]],
  [fs.readdir, [["path","callback"],["path","options","callback"]]],
  [fs.readdirSync, [["path","?options"],["path","options"]]],
  [fs.close, [["fd","callback"]]],
  [fs.closeSync, [["fd"]]],
  [fs.open, [["path","flags","callback"],["path","flags","mode","callback"]]],
  [fs.openSync, [["path","flags","?mode"]]],
  [fs.utimes, [["path","atime","mtime","callback"]]],
  [fs.utimesSync, [["path","atime","mtime"]]],
  [fs.futimes, [["fd","atime","mtime","callback"]]],
  [fs.futimesSync, [["fd","atime","mtime"]]],
  [fs.fsync, [["fd","callback"]]],
  [fs.fsyncSync, [["fd"]]],
  [fs.write, [["fd","buffer","callback"],["fd","string","callback"],["fd","buffer","offset","callback"],["fd","string","position","callback"],["fd","buffer","offset","length","callback"],["fd","string","position","encoding","callback"],["fd","buffer","offset","length","position","callback"]]],
  [fs.writeSync, [["fd","string","?position","?encoding"],["fd","buffer","?offset","?length","?position"]]],
  [fs.read, [["fd","buffer","offset","length","position","?callback"]]],
  [fs.readSync, [["fd","buffer","offset","length","position"]]],
  [fs.readFile, [["path","callback"],["path","options","callback"]]],
  [fs.readFileSync, [["path","?options"],["path","options"]]],
  [fs.writeFile, [["path","data","callback"],["path","data","options","callback"]]],
  [fs.writeFileSync, [["path","data","?options"]]],
  [fs.appendFile, [["file","data","callback"],["file","data","options","callback"]]],
  [fs.appendFileSync, [["file","data","?options"]]],
  [fs.watchFile, [["filename","listener"],["filename","options","listener"]]],
  [fs.unwatchFile, [["filename","?listener"]]],
  [fs.watch, [["filename","?listener"],["filename","options","?listener"]]],
  [fs.exists, [["path","callback"]]],
  [fs.existsSync, [["path"]]],
  [fs.access, [["path","callback"],["path","mode","callback"]]],
  [fs.accessSync, [["path","?mode"]]],
  [fs.createReadStream, [["path","?options"]]],
  [fs.createWriteStream, [["path","?options"]]],
  [fs.fdatasync, [["fd","callback"]]],
  [fs.fdatasyncSync, [["fd"]]],
  [fs.copyFile, [["src","dest","callback"],["src","dest","flags","callback"]]],
  [fs.copyFileSync, [["src","dest","?flags"]]],
  [http.createServer, [["?requestListener"],["options","?requestListener"]]],
  [http.request, [["options","?callback"],["url","options","?callback"]]],
  [http.get, [["options","?callback"],["url","options","?callback"]]],
  [http2.getPackedSettings, [["settings"]]],
  [http2.getUnpackedSettings, [["buf"]]],
  [http2.createServer, [["?onRequestHandler"],["options","?onRequestHandler"]]],
  [http2.createSecureServer, [["?onRequestHandler"],["options","?onRequestHandler"]]],
  [http2.connect, [["authority","?listener"],["authority","?options","?listener"]]],
  [https.createServer, [["options","?requestListener"]]],
  [https.request, [["options","?callback"],["url","options","?callback"]]],
  [https.get, [["options","?callback"],["url","options","?callback"]]],
  [inspector.open, [["?port","?host","?wait"]]],
  [net.createServer, [["?connectionListener"],["?options","?connectionListener"]]],
  [net.connect, [["options","?connectionListener"],["path","?connectionListener"],["port","?host","?connectionListener"]]],
  [net.createConnection, [["options","?connectionListener"],["path","?connectionListener"],["port","?host","?connectionListener"]]],
  [net.isIP, [["input"]]],
  [net.isIPv4, [["input"]]],
  [net.isIPv6, [["input"]]],
  [os.userInfo, [["?options"]]],
  [os.getPriority, [["?pid"]]],
  [os.setPriority, [["priority"],["pid","priority"]]],
  [path.normalize, [["p"]]],
  [path.join, [["...paths"]]],
  [path.resolve, [["...pathSegments"]]],
  [path.isAbsolute, [["path"]]],
  [path.relative, [["from","to"]]],
  [path.dirname, [["p"]]],
  [path.basename, [["p","?ext"]]],
  [path.extname, [["p"]]],
  [path.parse, [["pathString"]]],
  [path.format, [["pathObject"]]],
  [punycode.decode, [["string"]]],
  [punycode.encode, [["string"]]],
  [punycode.toUnicode, [["domain"]]],
  [punycode.toASCII, [["domain"]]],
  [querystring.stringify, [["?obj","?sep","?eq","?options"]]],
  [querystring.parse, [["str","?sep","?eq","?options"]]],
  [querystring.escape, [["str"]]],
  [querystring.unescape, [["str"]]],
  [readline.createInterface, [["options"],["input","?output","?completer","?terminal"]]],
  [readline.cursorTo, [["stream","x","?y"]]],
  [readline.emitKeypressEvents, [["stream","?interface"]]],
  [readline.moveCursor, [["stream","dx","dy"]]],
  [readline.clearLine, [["stream","dir"]]],
  [readline.clearScreenDown, [["stream"]]],
  [timers.setTimeout, [["callback","ms","...args"]]],
  [timers.clearTimeout, [["timeoutId"]]],
  [timers.setInterval, [["callback","ms","...args"]]],
  [timers.clearInterval, [["intervalId"]]],
  [timers.setImmediate, [["callback","...args"]]],
  [timers.clearImmediate, [["immediateId"]]],
  [tls.checkServerIdentity, [["host","cert"]]],
  [tls.createServer, [["options","?secureConnectionListener"]]],
  [tls.connect, [["options","?secureConnectListener"],["port","?options","?secureConnectListener"],["port","?host","?options","?secureConnectListener"]]],
  [tls.createSecurePair, [["?credentials","?isServer","?requestCert","?rejectUnauthorized"]]],
  [tls.createSecureContext, [["details"]]],
  [trace_events.createTracing, [["options"]]],
  [tty.isatty, [["fd"]]],
  [url.parse, [["urlStr"],["urlStr","parseQueryString","?slashesDenoteHost"]]],
  [url.format, [["urlObject"],["URL","?options"]]],
  [url.resolve, [["from","to"]]],
  [url.domainToASCII, [["domain"]]],
  [url.domainToUnicode, [["domain"]]],
  [url.fileURLToPath, [["url"]]],
  [url.pathToFileURL, [["url"]]],
  [util.format, [["format","...param"]]],
  [util.formatWithOptions, [["inspectOptions","format","...param"]]],
  [util.log, [["string"]]],
  [util.inspect, [["object","options"],["object","?showHidden","?depth","?color"]]],
  [util.isArray, [["object"]]],
  [util.isRegExp, [["object"]]],
  [util.isDate, [["object"]]],
  [util.isError, [["object"]]],
  [util.inherits, [["constructor","superConstructor"]]],
  [util.debuglog, [["key"]]],
  [util.isBoolean, [["object"]]],
  [util.isBuffer, [["object"]]],
  [util.isFunction, [["object"]]],
  [util.isNull, [["object"]]],
  [util.isNullOrUndefined, [["object"]]],
  [util.isNumber, [["object"]]],
  [util.isObject, [["object"]]],
  [util.isPrimitive, [["object"]]],
  [util.isString, [["object"]]],
  [util.isSymbol, [["object"]]],
  [util.isUndefined, [["object"]]],
  [util.deprecate, [["fn","message"]]],
  [util.isDeepStrictEqual, [["val1","val2"]]],
  [util.callbackify, [["fn"]]],
  [util.promisify, [["fn"]]],
  [v8.setFlagsFromString, [["flags"]]],
  [vm.createContext, [["?sandbox"]]],
  [vm.isContext, [["sandbox"]]],
  [vm.runInContext, [["code","contextifiedSandbox","?options"]]],
  [vm.runInNewContext, [["code","?sandbox","?options"]]],
  [vm.runInThisContext, [["code","?options"]]],
  [vm.compileFunction, [["code","params","options"]]],
  [zlib.createGzip, [["?options"]]],
  [zlib.createGunzip, [["?options"]]],
  [zlib.createDeflate, [["?options"]]],
  [zlib.createInflate, [["?options"]]],
  [zlib.createDeflateRaw, [["?options"]]],
  [zlib.createInflateRaw, [["?options"]]],
  [zlib.createUnzip, [["?options"]]],
  [zlib.deflate, [["buf","callback"],["buf","options","callback"]]],
  [zlib.deflateSync, [["buf","?options"]]],
  [zlib.deflateRaw, [["buf","callback"],["buf","options","callback"]]],
  [zlib.deflateRawSync, [["buf","?options"]]],
  [zlib.gzip, [["buf","callback"],["buf","options","callback"]]],
  [zlib.gzipSync, [["buf","?options"]]],
  [zlib.gunzip, [["buf","callback"],["buf","options","callback"]]],
  [zlib.gunzipSync, [["buf","?options"]]],
  [zlib.inflate, [["buf","callback"],["buf","options","callback"]]],
  [zlib.inflateSync, [["buf","?options"]]],
  [zlib.inflateRaw, [["buf","callback"],["buf","options","callback"]]],
  [zlib.inflateRawSync, [["buf","?options"]]],
  [zlib.unzip, [["buf","callback"],["buf","options","callback"]]],
  [zlib.unzipSync, [["buf","?options"]]],
  [global.queueMicrotask, [["callback"]]],
].filter(([key]) => key !== undefined));
